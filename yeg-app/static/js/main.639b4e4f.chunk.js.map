{"version":3,"sources":["App.js","config.js","serviceWorker.js","index.js"],"names":["T","require","consumer_key","consumer_secret","access_token","access_token_secret","tweetArray","index","params","q","count","searchedData","err","data","resp","console","log","loopArray","length","currentTweet","url","document","getElementById","html","userScreenName","idStr","setTimeout","App","get","className","id","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wWAKIA,G,cAAI,IADKC,EAAQ,KACb,CCLc,CAClBC,aAAc,4BACdC,gBAAiB,qDACjBC,aAAc,qDACdC,oBAAqB,mDDErBC,EAAa,GACbC,EAAQ,EAENC,EAAS,CACbC,EAAG,kBACHC,MAAO,IAiBT,SAASC,EAAaC,EAAKC,EAAMC,GAC/BC,QAAQC,IAAIH,GAoBd,SAASI,IACP,GAAIX,EAAWY,OAASX,EAAO,CAC3B,IAAIY,EAAeb,EAAWC,GAC9BA,IACA,IAAIa,EAAMC,SAASC,eAAe,WAE9BC,EAAO,6GACGJ,EAAaK,eACb,eACAL,EAAaM,MACb,cAGdL,EAAIG,KAAOA,OAEXhB,EAAQ,EAEZmB,WAAWT,EAAW,KAGTU,MAvDf,WAGE,OAFA3B,EAAE4B,IAAI,gBAAiBpB,EAAQG,GAC/BM,IAEE,yBAAKY,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKA,UAAU,UACX,uBAAGC,GAAG,WAAN,+CETQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAShB,SAASC,eAAe,SD6H3C,kBAAmBgB,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9B,QAAQ8B,MAAMA,EAAMC,c","file":"static/js/main.639b4e4f.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport { config } from './config.js';\n\nconst twit = require('twit');\nvar T = new twit(config);\nvar tweetArray = [];\nvar index = 0;\n\nconst params = {\n  q: 'startupedmonton',\n  count: 10\n};\n\nfunction App() {\n  T.get('search/tweets', params, searchedData);\n  loopArray();\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div className=\"middle\">\n            <p id=\"content\">Tweet content should load here shortly!</p>\n        </div>\n      </header>\n    </div>\n  );\n}\n\nfunction searchedData(err, data, resp) {\n  console.log(data);\n  // for (let index = 0; index < data.statuses.length; index++) {\n  //     const tweet = data.statuses[index];\n  //     let tweetbody = {\n  //         'text': tweet.text,\n  //         'userScreenName': tweet.user.screen_name,\n  //         'userImage': tweet.user.profile_image_url_https,\n  //         'userDescription': tweet.user.description,\n  //         'idStr': tweet.id_str,\n  //     }\n\n  //     // try {\n  //     //     if (tweet.entities.media[0].media_url_https) {\n  //     //         tweetbody['image'] = tweet.entities.media[0].media_url_https;\n  //     //     }\n  //     // } catch(e) { }\n  //     tweetArray.push(tweetbody);\n  // }\n}\n\nfunction loopArray() {\n  if (tweetArray.length > index) {\n      var currentTweet = tweetArray[index];\n      index++;\n      var url = document.getElementById('content');\n\n      let html = \"<iframe border=0 frameborder=0 height=550 src=\\\"https://twitframe.com/show?url=https%3A%2F%2Ftwitter.com%2F\"\n                  + currentTweet.userScreenName \n                  + \"%2Fstatus%2F\" \n                  + currentTweet.idStr \n                  + \"\\\"></iframe>\"\n\n      \n      url.html = html;\n  } else {\n      index = 0;\n  }\n  setTimeout(loopArray, 10000);\n}\n\nexport default App;\n","export const config = {\n    consumer_key: 'vPwYYg5tX7f1h5GbZSzeSOk0z',\n    consumer_secret: 'CIHlERDlu7Zzd3iw6jXjjPmwyb2e8mY5ZoZb7nJjd4U5LO7HUq',\n    access_token: '1228091126621462528-RI1C4HJBP4O4627OmpxPuXmJauQplR',\n    access_token_secret: 'RFTBwOMOpo3NDrCulo1JwWpDgZOyP3XMWfO7WqWxDY9Ve',\n};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}